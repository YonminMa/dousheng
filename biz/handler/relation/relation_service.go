// Code generated by hertz generator.

package relation

import (
	"context"
	"dousheng/biz/dal/mysql"
	"dousheng/biz/handler/user"
	relation "dousheng/biz/model/relation"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction 关注操作
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var userId int64
	err = user.GetIdFromJWT(ctx, c, &userId)
	if err != nil {
		return
	}

	resp := &relation.RelationActionResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
	}
	if req.GetActionType() == 1 {
		// 关注操作
		err := mysql.CreateRelation(ctx, userId, req.GetToUserID())
		if err != nil {
			return
		}
	} else if req.GetActionType() == 2 {
		// 取消关注操作
		err := mysql.DeleteRelation(ctx, userId, req.GetToUserID())
		if err != nil {
			return
		}
	} else {
		// 如果 action type 不为 1 或 2 则报错
		resp = &relation.RelationActionResponse{
			StatusCode: relation.Code_Error,
			StatusMsg:  "Wrong action type",
		}
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowList 获取关注列表
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var userId int64
	err = user.GetIdFromJWT(ctx, c, &userId)
	if err != nil {
		return
	}

	followIds, err := mysql.QueryFollowById(ctx, req.GetUserID())
	if err != nil {
		return
	}

	follows, err := mysql.QueryUserByIds(ctx, followIds)
	if err != nil {
		return
	}

	userList := make([]*relation.User, 0)
	for _, follow := range follows {
		userList = append(userList, &relation.User{
			ID:            int64(follow.ID),
			Name:          follow.Name,
			FollowCount:   follow.FollowerCount,
			FollowerCount: follow.FollowCount,
			IsFollow:      mysql.CheckIsFollow(ctx, userId, int64(follow.ID)),
		})
	}

	resp := relation.FollowListResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
		UserList:   userList,
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowerList 获取粉丝列表
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var userId int64
	err = user.GetIdFromJWT(ctx, c, &userId)
	if err != nil {
		return
	}

	followerIds, err := mysql.QueryFollowerById(ctx, req.GetUserID())
	if err != nil {
		return
	}

	followers, err := mysql.QueryUserByIds(ctx, followerIds)
	if err != nil {
		return
	}

	userList := make([]*relation.User, 0)
	for _, follower := range followers {
		userList = append(userList, &relation.User{
			ID:            int64(follower.ID),
			Name:          follower.Name,
			FollowCount:   follower.FollowerCount,
			FollowerCount: follower.FollowCount,
			IsFollow:      mysql.CheckIsFollow(ctx, userId, int64(follower.ID)),
		})
	}

	resp := relation.FollowerListResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
		UserList:   userList,
	}

	c.JSON(consts.StatusOK, resp)
}
