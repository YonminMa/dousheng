// Code generated by hertz generator.

package relation

import (
	"context"
	"dousheng/biz/dal/mysql"
	relation "dousheng/biz/model/relation"
	"dousheng/biz/mw"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction 关注操作
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(mw.IdentityKey)
	userId := int64(v.(*mysql.UserRaw).ID)
	toUserId := req.GetToUserID()

	toUsers, err := mysql.QueryUserById(ctx, toUserId)
	if err != nil {
		return
	}
	// 如果要关注的用户不存在则报错
	if len(toUsers) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "User doesn't exist",
		})
		return
	}
	// 如果要关注的人是自己则报错
	if userId == toUserId {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "You can't follow yourself",
		})
		return
	}

	if req.GetActionType() == 1 {
		// 如果已经关注了则报错
		if mysql.CheckIsFollow(ctx, userId, toUserId) {
			c.JSON(consts.StatusOK, utils.H{
				"status_code":    consts.StatusBadRequest,
				"status_message": "You have followed",
			})
			return
		} else {
			// 关注操作
			err := mysql.CreateRelation(ctx, userId, toUserId)
			if err != nil {
				return
			}
		}
	} else if req.GetActionType() == 2 {
		// 如果已经取消关注了则报错
		if !mysql.CheckIsFollow(ctx, userId, toUserId) {
			c.JSON(consts.StatusOK, utils.H{
				"status_code":    consts.StatusBadRequest,
				"status_message": "You have unfollowed",
			})
			return
		} else {
			// 取消关注操作
			err := mysql.DeleteRelation(ctx, userId, toUserId)
			if err != nil {
				return
			}
		}
	} else {
		// 如果 action type 不为 1 或 2 则报错
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "Wrong action type",
		})
		return
	}
	resp := &relation.RelationActionResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
	}
	c.JSON(consts.StatusOK, resp)
}

// FollowList 获取关注列表
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	users, err := mysql.QueryUserById(ctx, req.GetUserID())
	if err != nil {
		return
	}
	// 用户不存在则报错
	if len(users) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "User doesn't exist",
		})
		return
	}

	v, _ := c.Get(mw.IdentityKey)
	userId := int64(v.(*mysql.UserRaw).ID)

	followIds, err := mysql.QueryFollowById(ctx, req.GetUserID())
	if err != nil {
		return
	}

	var userList []*relation.User
	err = QueryUserListByIds(ctx, userId, followIds, &userList)
	if err != nil {
		return
	}

	resp := relation.FollowListResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
		UserList:   userList,
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowerList 获取粉丝列表
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	users, err := mysql.QueryUserById(ctx, req.GetUserID())
	if err != nil {
		return
	}
	// 用户不存在则报错
	if len(users) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "User doesn't exist",
		})
		return
	}

	v, _ := c.Get(mw.IdentityKey)
	userId := int64(v.(*mysql.UserRaw).ID)

	followerIds, err := mysql.QueryFollowerById(ctx, req.GetUserID())
	if err != nil {
		return
	}

	var userList []*relation.User
	err = QueryUserListByIds(ctx, userId, followerIds, &userList)
	if err != nil {
		return
	}

	resp := relation.FollowerListResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
		UserList:   userList,
	}

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	users, err := mysql.QueryUserById(ctx, req.GetUserID())
	if err != nil {
		return
	}
	// 用户不存在则报错
	if len(users) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "User doesn't exist",
		})
		return
	}

	v, _ := c.Get(mw.IdentityKey)
	userId := int64(v.(*mysql.UserRaw).ID)

	followerIds, err := mysql.QueryFollowerById(ctx, req.GetUserID())
	if err != nil {
		return
	}

	followIds, err := mysql.QueryFollowById(ctx, req.GetUserID())
	if err != nil {
		return
	}

	// 求 followerIds 和 followIds 的交集
	m := make(map[int64]bool)
	for _, followerId := range followerIds {
		m[followerId] = true
	}
	var friendIds []int64
	for _, followId := range followIds {
		if m[followId] {
			friendIds = append(friendIds, followId)
		}
	}

	var userList []*relation.User
	err = QueryUserListByIds(ctx, userId, friendIds, &userList)
	if err != nil {
		return
	}

	resp := relation.FollowerListResponse{
		StatusCode: relation.Code_Success,
		StatusMsg:  "Success",
		UserList:   userList,
	}

	c.JSON(consts.StatusOK, resp)
}

func QueryUserListByIds(ctx context.Context, userId int64, ids []int64, userList *[]*relation.User) error {
	users, err := mysql.QueryUserByIds(ctx, ids)
	if err != nil {
		return err
	}

	var relationMap map[int64]*mysql.RelationRaw
	relationMap, err = mysql.QueryRelationByIds(ctx, userId, ids)
	if err != nil {
		return err
	}

	isFollow := false
	for _, u := range users {
		_, ok := relationMap[int64(u.ID)]
		if ok {
			isFollow = true
		} else {
			isFollow = false
		}
		*userList = append(*userList, &relation.User{
			ID:            int64(u.ID),
			Name:          u.Name,
			FollowCount:   u.FollowerCount,
			FollowerCount: u.FollowCount,
			IsFollow:      isFollow,
		})
	}
	return nil
}
