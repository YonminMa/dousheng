// Code generated by hertz generator.

package user

import (
	"context"
	"dousheng/biz/dal/mysql"
	user "dousheng/biz/model/user"
	"dousheng/biz/mw"
	utils2 "dousheng/pkg/utils"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RegisterUser .
// @router /douyin/user/register/ [POST]
func RegisterUser(ctx context.Context, c *app.RequestContext) {
	fmt.Println("调用 register user 接口")
	var err error
	var req user.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	username := req.GetUsername()
	password := req.GetPassword()

	// 如果用户名已经存在则报错
	users, err := mysql.QueryUserByName(ctx, username)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": err.Error(),
		})
		return
	}
	if len(users) != 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "user already exists",
		})
		return
	}

	// 插入数据库
	userId, err := mysql.UserRegister(ctx, username, utils2.MD5(password))
	c.Set("user_id", userId)

	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// LoginUser .
// @router /douyin/user/login/ [POST]
func LoginUser(ctx context.Context, c *app.RequestContext) {
	fmt.Println("调用 loginuser 接口")
	var err error
	var req user.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	users, err := mysql.QueryUserByName(ctx, req.GetUsername())
	// 用户不存在则报错
	if len(users) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "user doesn't exist",
		})
		return
	}
	c.Set("user_id", users[0].ID)
	// LoginHandler 中包含判断用户名或者密码错误的逻辑
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	fmt.Println("调用 userinfo 接口")
	var err error
	var req user.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 查询被访问用户
	users, err := mysql.QueryUserById(ctx, req.UserID)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": err.Error(),
		})
		return
	}
	// 用户不存在则报错
	if len(users) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "user doesn't exist",
		})
		return
	}

	v, _ := c.Get(mw.IdentityKey)
	userId := int64(v.(*mysql.UserRaw).ID)

	isFollow := mysql.CheckIsFollow(ctx, userId, req.GetUserID())

	resp := user.UserInfoResponse{
		StatusCode: user.Code_Success,
		StatusMsg:  "Success",
		User: &user.User{
			ID:            int64(users[0].ID),
			Name:          users[0].Name,
			FollowCount:   users[0].FollowCount,
			FollowerCount: users[0].FollowerCount,
			IsFollow:      isFollow,
		},
	}

	c.JSON(consts.StatusOK, resp)
}
