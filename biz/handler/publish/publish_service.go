// Code generated by hertz generator.

package publish

import (
	"context"
	"dousheng/biz/dal/mysql"
	"dousheng/biz/mw"
	"github.com/cloudwego/hertz/pkg/common/utils"

	publish "dousheng/biz/model/publish"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(publish.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(mw.IdentityKey)
	userId := int64(v.(*mysql.UserRaw).ID)

	authors, err := mysql.QueryUserById(ctx, req.GetUserID())
	if err != nil {
		return
	}
	if len(authors) == 0 {
		c.JSON(consts.StatusOK, utils.H{
			"status_code":    consts.StatusBadRequest,
			"status_message": "user doesn't exist",
		})
		return
	}

	u := authors[0]
	author := &publish.User{
		ID:            int64(u.ID),
		Name:          u.Name,
		FollowCount:   u.FollowerCount,
		FollowerCount: u.FollowCount,
		IsFollow:      mysql.CheckIsFollow(ctx, userId, int64(u.ID)),
	}

	videoRaws, err := mysql.QueryVideoByUserId(ctx, req.GetUserID())
	if err != nil {
		return
	}

	videoIds := make([]int64, 0)
	for _, videoRaw := range videoRaws {
		videoIds = append(videoIds, int64(videoRaw.ID))
	}
	favoriteMap, err := mysql.QueryFavoriteByVideoIds(ctx, userId, videoIds)
	if err != nil {
		return
	}

	var isFavorite bool
	videoList := make([]*publish.Video, 0)
	for _, videoRaw := range videoRaws {
		_, ok := favoriteMap[int64(videoRaw.ID)]
		if ok {
			isFavorite = true
		} else {
			isFavorite = false
		}
		videoList = append(videoList, &publish.Video{
			ID:            int64(videoRaw.ID),
			Author:        author,
			PlayURL:       videoRaw.PlayUrl,
			CoverURL:      videoRaw.CoverUrl,
			FavoriteCount: videoRaw.FavoriteCount,
			CommentCount:  videoRaw.CommentCount,
			IsFavorite:    isFavorite,
			Title:         videoRaw.Title,
		})
	}

	resp := publish.PublishListResponse{
		StatusCode: publish.Code_Success,
		StatusMsg:  "Success",
		VideoList:  videoList,
	}

	c.JSON(consts.StatusOK, resp)
}
